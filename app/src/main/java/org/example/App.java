/*
 * This source file was generated by the Gradle 'init' task
 */

//TO-DO:
/*
 * - Clean Up & Organize Code More Into crRequest Class
 * - Finish Json Uploading method
 * - Make a seperate method designed to run the headFile
 * - Make a seperate method designed to delete extra files
 * - Make them both upload into the 
 * - Remove Print Statements and turn to actual error catching
 */
package org.example;

//JUST GET ALL THE IO STUFF
import java.io.*;
import java.util.*;
import io.javalin.Javalin;
import io.javalin.http.UploadedFile;
import io.javalin.http.Context;

import java.nio.file.StandardCopyOption;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import com.google.gson.Gson;


class crRequest {

    static private Gson gson;
    private Context ctx;
    //private UploadedFile indexFile;
    private String indexFilename; // Set to the first file indexed if its an uploaded file and the specified main file if given in a json
    private List<File> files;

    crRequest(Context ctx) {
        gson=new Gson();
        this.ctx = ctx;
        //if(ctx.body().contains("json")){
            saveFileFromJson(ctx);
        /* }
        else{
            System.out.println("DEBUG -- I HAVE BEGUN SAVING THE ATTACHED FILE"); //DEBUG PRINT
            saveAttachedFile();
        }*/
    }

      /*
                     * output = compileAndRun(file.filename());
                     * outputDict.put("result",output);
                     * System.out.println("RUNNING OUTCOME: " + compileAndRun(file.filename()));
                     * javaFile.delete();
                     */

    public String getIndexFilename(){
        return indexFilename;
    }

    public int saveFileWithContents(String filename, InputStream fileContents){
        try {
            File javaFile = new File(filename);
            if (javaFile.createNewFile()) 
            {//Creates new File and only runs rest of code if the file was succesfully created
                System.out.println("File created: " + javaFile.getName());
                javaFile.setWritable(true);
                //if (javaFile.canWrite()) { //Check to make sure javaFile is writable(for the most part unnecesary)
                    try { // Copies code to inputStream
                        Files.copy(fileContents, javaFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        System.out.println("Content written to file: " + javaFile.getName());
                        return 1;
                    }
                    catch (Exception e) {
                        System.out.println("Generic Error Writing to Text File");
                        return 0;
                    }
                //}
            }
        }
        //Catch possible errors 
        catch (IOException e) {
            System.out.println("ERROR OCCURED IN WRITING/CREATING NEW FILE:");
            e.printStackTrace();
            return 0;
        } catch (Exception e) {
            System.out.println("ERROR OCCURED IN WRITING/CREATING NEW FILE(NON IOEXCEPTION ERROR):");
            e.printStackTrace();
            return 0;
        }
        return 0;

    }


    // Returns 1 if successful, returning 0 if unsuccesful
    public int saveAttachedFile() {
        System.out.println("RUnning saveAttached File"); // debug
        String fileContents = "";
        //System.out.println("DEBUG -- OPEN METHOED " + ctx.uploadedFiles().size());
        indexFilename = ctx.uploadedFiles().get(0).filename();
        for (UploadedFile file : ctx.uploadedFiles()) {
            System.out.println("CONTENTS OF " + file.filename()); //DEBUG LINE

            // Read through file & save contents to fileContents
            InputStream stream = file.content();
            Scanner scanner = new Scanner(stream).useDelimiter("\\A");
            fileContents = "";
            while (scanner.hasNextLine()) {
                fileContents += "\n" + scanner.nextLine();
            }
            //Creates javaFile w/ same name as uploadedFile and
            saveFileWithContents(file.filename(), stream);

        }
        return 1;
    }

    public int saveFileFromJson(Context ctx) {
        System.out.println("RUnning savefrom json"); // debug
        try {
            // System.out.println("\n\n\n BODY OF REQUEST: " + ctx.body()); //DEBUG PRINT
            System.out.println("b4");
            Map<String, Object> inputDict = new HashMap<>();

            // inputDict.put()
            
            inputDict = gson.fromJson(ctx.body(), Map.class);
            System.out.println("After");
            String filename;
            InputStream contents;
            try{
                contents = (InputStream)inputDict.get("Code");
                
                filename = (String)inputDict.get("Filename");
                saveFileWithContents(filename, contents);

                compileAndRun(filename + ".java");
            }
            catch(Exception e){
                e.printStackTrace();
                ctx.result("Bad Request: "  + e.getStackTrace());
            }
            
            

            return 1;
        } catch (Exception e) {
            e.printStackTrace();
            ctx.result("Sever Error: "  + e.getStackTrace());
            return 0;
        }

    }

    /*
     * curl -X POST -H "Content-Type: appplication/json" -d '{"Filename":"testingJson","Code":"public class Test1 {public static void main(String[] args){for(int i = 0; i< 20; i++){System.out.println(1+2);}}}"} http://localhost:7070/post_test/'
     */

    public static String compileAndRun(String dir) {
        String crCommand = "java " + dir;
        try {
            Process compileAndRun = Runtime.getRuntime().exec(crCommand);
            BufferedReader reader = new BufferedReader(new InputStreamReader(compileAndRun.getInputStream()));
            String outputString = "";
            String line;
            while ((line = reader.readLine()) != null) {
                outputString += "\n" + line;

            }
            compileAndRun.destroy();
            return outputString;
        } catch (IOException e) {
            System.out.println("ERROR DURING COMPILATION & RUNNING PROCESS");
            return "ERROR";
        }

    }

    // Returns 1 if successful, returning 0 if unsuccesful
    public static int destroyListedFiles(List<String> filenames) {

        for (String filename : filenames) {
            File file = new File(filename);
            try {
                file.delete();
            } catch (Exception e) {
                System.out.println("Errors Deleting Files");
                return 0;
            }
        }
        return 1;
    }

}


public class App {
    
    public static void main(String[] args) {
        Gson gson=new Gson();// Initalize and create for conversions to json
        var app = Javalin.create(/* config */)
                .get("/", ctx -> ctx.result("Hello World"))
                .post("/post_test/", ctx -> {
                    // Initialize variables for process
                    String output = "";

                    Map<String, Object> outputDict = new HashMap<>();
                    
                    //I have no idea why but without this specific line of code before calling crRequest
                    System.out.println("POST REQUEST RECEIVED " + ctx.uploadedFiles().size());

                    crRequest compiler = new crRequest(ctx);

                    // Test Response for Debugging in Terminal

                    outputDict.put("Success",true);
                    outputDict.put("Results",crRequest.compileAndRun(compiler.getIndexFilename()));

                  
                    //outputDict.put("output", compileAndRun(indexFile.filename()));
                    //destroyListedFiles(filenames);

                    String Response = "\n FILE(S) RECEIVED - CONTENTS DISPLAYED BELOW";
                    

                    ctx.result(gson.toJson(outputDict));
                    // TEST COMMAND: curl -X POST -F "file1=@.\Test1.java" -F "file2=@.\Test2.java"
                    // -F "file3=@.\Test3.java" http://localhost:7070/post_test/
                    // curl -X POST -F "file1=@.\Test1.java" http://localhost:7070/post_test/
                })
                .start(7070);
        System.out.println(new App());
    }
}

