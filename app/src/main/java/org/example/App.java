/*
 * This source file was generated by the Gradle 'init' task
 */


package org.example;

//JUST GET ALL THE IO STUFF
import java.io.*;
import java.util.*; 
import io.javalin.Javalin;
import io.javalin.http.UploadedFile;

import java.nio.file.StandardCopyOption;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }


    public static String compileAndRun(String dir){
        String crCommand = "java " + dir;
        try{
            Process compileAndRun = Runtime.getRuntime().exec(crCommand);
            BufferedReader reader = new BufferedReader(new InputStreamReader(compileAndRun.getInputStream()));
            String outputString = "";
            String line;
            while ((line = reader.readLine()) != null) {
                outputString += "\n" + line;

            }
            compileAndRun.destroy();
            return outputString;
        }
        catch(IOException e){
            System.out.println("ERROR DURING COMPILATION & RUNNING PROCESS");
            return "ERROR";
        }
    
    }

    public static void main(String[] args) {
        var app = Javalin.create(/*config*/)
            .get("/", ctx -> ctx.result("Hello World"))
            .post("/post_test/", ctx -> {
                String fileContents = "";
                List<String> filenames = new ArrayList<>();
                String Response = "\n FILE(S) RECEIVED - CONTENTS DISPLAYED BELOW";
                for(UploadedFile file: ctx.uploadedFiles()){
                    filenames.add(file.filename());
                    
                    System.out.println("CONTENTS OF " + file.filename());
                    InputStream stream = file.content();
                    Scanner scanner = new Scanner(stream).useDelimiter("\\A");
                    fileContents = "";
                    while(scanner.hasNextLine()){
                        fileContents += "\n" + scanner.nextLine();
                        //System.out.println(scanner.nextLine());
                    }
                    System.out.println(fileContents);
                    try {
                        File javaFile = new File(file.filename());
                        if (javaFile.createNewFile()) {
                          System.out.println("File created: " + javaFile.getName());
                          javaFile.setWritable(true);
                          if(javaFile.canWrite()){
                            try (InputStream inputStream = file.content()) {
                                Files.copy(inputStream, javaFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                                System.out.println("Content written to file: " + javaFile.getName());
                                System.out.println("RUNNING OUTCOME: " + compileAndRun(file.filename()));
                                javaFile.delete();   
                            }
                            catch(Exception e){
                                System.out.println("ERROR WRITING IN FILE");
                            }
    
                          }
                        }
                    }
                    catch(IOException e)
                    {
                        System.out.println("ERROR OCCURED IN WRITING/CREATING NEW FILE:");
                        e.printStackTrace();
                    }
                    catch(Exception e){
                        System.out.println("ERROR OCCURED IN WRITING/CREATING NEW FILE(NON IOEXCEPTION ERROR):");
                        e.printStackTrace();
                    }
                   
                }
                ctx.result("Uploaded files: " + String.join(", ", filenames));
                //TEST COMMAND: curl -X POST -F "file1=@.\Schlamann-Grading-Server\Test1.java" -F "file2=@.\Schlamann-Grading-Server\Test2.java" -F "file3=@.\Schlamann-Grading-Server\Test3.java" http://localhost:7070/post_test/
            })
            .start(7070);
        System.out.println(new App().getGreeting());
    }
}
